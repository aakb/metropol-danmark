<?php
// $Id:$

/**
 * @file
 * Enhanced control over the meta description (in the head tag).
 *
 * This module gives you control over the meta description. It gives you the chance
 * to provide patterns for how the description should be structured, and on node
 * pages, gives you the chance to specify the meta description.
 */


/**
 * Implementation of hook_perm().
 */
function meta_description_perm() {
  return array('set meta description', 'administer meta description');
}


/**
 * Implementation of hook_menu().
 */
function meta_description_menu() {
  $items = array();

  $items['admin/content/meta_description'] = array(
    'title' => 'Meta descriptions',
    'description' => 'Enhanced control over the meta description.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('meta_description_admin_settings'),
    'access callback' => 'user_access',
    'access arguments' => array('administer meta descriptions'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'meta_description.admin.inc',
  );

  return $items;
}


/**
 * Implementation of hook_theme().
 */
function meta_description_theme() {
  return array(
    'meta_description_admin_settings' => array(
      'template' => 'meta_description-admin-settings-form',
      'arguments' => array('form' => NULL),
    ),

    'meta_description_preprocess_page' => array(
      'arguments' => array('vars' => NULL),
    ),
  );
}


/**
 * Implementation of hook_node_type().
 * Updates settings after a node type change.
 */
function meta_description_node_type($op, $info) {
  // Handle a content type rename
  if ($op == 'update' && !empty($info->old_type) && $info->type != $info->old_type) {
    // Load the old node type settings.
    $temp = variable_get('meta_description_type_'. $info->old_type, '');

    // If the settings aren't empty, then save them into the new type
    if (!empty($temp)) {
      variable_set('meta_description_type_'. $info->type, $temp);
    }

    // Delete the old setting
    variable_del('meta_description_type_'. $info->old_type);

    // Essentially, do the same as above but with the _showfield suffix for the node type
    $temp = variable_get('meta_description_type_'. $info->old_type .'_showfield', 0);
    if ($temp) {
      variable_set('meta_description_type_'. $info->type .'_showfield', $temp);
    }
    variable_del('meta_description_type_'. $info->old_type .'_showfield');

  }

  // If deleted, remove the variables
  if ($op == 'delete') {
    variable_del('meta_description_type_'. $info->type);
    variable_del('meta_description_type_'. $info->type .'_showfield');
  }
}


/**
 * Implementation of hook_form_alter().
 */
function meta_description_form_alter(&$form, $form_state, $form_id) {
  // If we dont have permission to set the title then we need to abort this alter now!
  if (!user_access('set meta description')) return;

  // Check we're editing a node and also check that the node type's 'show field' is enabled
  if ($form['#id'] == 'node-form') {
    $key = 'meta_description_type_'. $form['type']['#value'] .'_showfield';
    if (variable_get($key, 0)) {
      $form['meta_description'] = array(
        '#type' => 'textfield',
        '#title' => t('Meta description'),
        '#description' => t('Provide a description of this node to appear in the meta description tag which search engines can use in search result listings (optional). It is generally accepted this field should be less than 150 characters.'),
        '#default_value' => $form['#node']->meta_description,
        '#size' => 60,
        '#maxlength' => 255,
        '#weight' => -4,
      );
    }
  }
  elseif ($form_id == 'node_type_form') {
    $form['meta_description'] = array(
      '#type' => 'fieldset',
      '#title' => t('Meta Description Settings'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#tree' => TRUE,
    );

    $form['meta_description']['show_field'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Meta Description Field'),
      '#description' => t('If checked, the <em>Meta Description</em> field will appear on the node edit form for those who have permission to set the title.'),
      '#options' => array(
        'show_field' => t('Show field'),
      ),
      '#default_value' => variable_get('meta_description_type_'. $form['#node_type']->type .'_showfield', 0) ? array('show_field') : array(),
    );

    $form['meta_description']['pattern'] = array(
      '#type' => 'textfield',
      '#title' => t('Meta Description Pattern'),
      '#default_value' => variable_get('meta_description_type_'. $form['#node_type']->type, ''),
      '#description' => t('Enter the <em>Meta Description</em> pattern you want to use for this node type. For more information, please use the !link settings page', array('!link' => l('Meta Description', 'admin/content/meta_description'))),
    );

    $form['#submit'][] = 'meta_description_node_type_form_submit';
  }
}


/**
 * Submit handler for the node_type_form element added in the hook_form_alter() above.
 */
function meta_description_node_type_form_submit($form, &$form_state) {
  $show_field = $form_state['values']['meta_description']['show_field']['show_field'] ? 1 : 0;
  variable_set('meta_description_type_'. $form_state['values']['type'] .'_showfield', $show_field);
  variable_set('meta_description_type_'. $form_state['values']['type'], $form_state['values']['meta_description']['pattern']);

  // For some reason the node module adds the fieldset as a separate entry in the variables table... we dont want this!
  variable_del('meta_description_'. $form_state['values']['type']);
}


/**
 * Implementation of hook_nodeapi().
 */
function meta_description_nodeapi(&$node, $op, $teaser = NULL, $page = NULL) {
  switch ($op) {
    case 'update':
      if (user_access('set meta description')) {
        db_query('DELETE FROM {meta_description} WHERE type = "node" AND id = %d', $node->nid);
      }
      // fallthrough to insert intentional!
    case 'insert':
      if (isset($node->meta_description) && drupal_strlen(trim($node->meta_description)) > 0 && user_access('set meta description')) {
        db_query('INSERT INTO {meta_description} VALUES ("node", %d, "%s")', $node->nid, $node->meta_description);
      }
      break;

    case 'delete':
      db_query('DELETE FROM {meta_description} WHERE type = "node" AND id = %d', $node->nid);
      break;

    case 'load':
      return array('meta_description' => meta_description_load_description($node->nid, 'node'));
  }
}


/**
 * Simple wrapper function to get the currently set title for a page
 *
 * @return
 *   string the title for the current page
 */
function meta_description_get_description() {
  // If we're looking at a node or a comment on a node, get the node object from the menu system.
  if ((arg(0) == 'node' && is_numeric(arg(1)))  ||  (arg(0) == 'comment' && arg(1) == 'reply' && is_numeric(arg(2))) && module_exists('comment')) {
    $node = menu_get_object();
    // If the node has a custom meta description and the node type is configured to have a custom meta description (ie, it's not a leftover from a previous setting), then use it.
    if (!empty($node->meta_description) && variable_get('meta_description_type_'. $node->type .'_showfield', 0)) {
      $description = $node->meta_description;
    }
  }

  // If nothing above set a title, give the legacy function a chance to act
  if (empty($description)) {
    $description = meta_description_set_description();
  }

  // Give other modules the oppertunity to use hook_meta_description_alter().
  drupal_alter('meta_description', $description);

  // Return the title in a safe form (any tags removed (such as emphasised or strong tags) and eny entiied encoded)
  return filter_xss($description, array());
}


/**
 * Gets the meta description for a type & id.
 *
 * @param $id
 *   int The objects id.
 * @param $type
 *   string What is the scope (usually 'node', 'term' or 'user').
 *
 * @return
 *   string the meta description for the given type & id.
 */
function meta_description_load_description($id, $type) {
  return db_result(db_query('SELECT meta_description FROM {meta_description} WHERE type = "%s" AND id = %d', $type, $id));
}


/**
 * Wrapper for old function...
 * NOTE: This has been depricated in favor of meta_description_load_description().
 */
function meta_description_node_get_description($nid) {
  return meta_description_load_description($nid, 'node');
}


/**
 * Legacy meta description setting function...
 * NOTE: This has been depreicated in favour of hook_meta_description_alter().
 */
function meta_description_set_description($description = NULL) {
  static $stored_description;

  if (isset($description)) {
    $stored_description = $description;
  }
  return $stored_description;
}


/**
 * Determines what title should be sent to the page template.
 *
 * Call this function from the page hook of function _phptemplate_variables in
 * template.php.
 *
 * @return
 *   string The page's title.
 */
function meta_description_page_get_description() {
  static $description = NULL;

  if (is_null($description)) {
    // If frontpage, then use the frontpage pattern and set the title.
    if (drupal_is_front_page()) {
      // Get the frontpage pattern
      $meta_description_pattern = variable_get('meta_description_front', '');
      
      // Allow hook_meta_description_pattern_alter() to modify the pattern. In this case we can use drupal_alter as we have no tokens to alter.
      drupal_alter('meta_description_pattern', $meta_description_pattern);

      // Apply the token patterns using the one-level replacer (frontpage is only "global" scope). Need to flush the token cache first.
      token_get_values('global', NULL, TRUE);
      $description = token_replace($meta_description_pattern);
    }
    // Otherwise this is a non-frontpage meta description.
    else {
      // Initialize some variables we need
      $meta_description_pattern = '';
      $types = array('global' => NULL);

      // Determine scope
      // Node (either node or comment reply)
      if ((arg(0) == 'node' && is_numeric(arg(1)))  ||  (arg(0) == 'comment' && arg(1) == 'reply' && is_numeric(arg(2)) && module_exists('comment')) ) {
        $types['node'] = menu_get_object();
        
        // If the node has a custom meta description and the node type is configured to have a custom meta description (ie, it's not a leftover from a previous setting), then use it.
        if (!empty($types['node']->meta_description) && variable_get('meta_description_type_'. $types['node']->type .'_showfield', 0)) {
          $meta_description_pattern = $types['node']->meta_description;
        }
        else {
          $meta_description_pattern = variable_get('meta_description_type_'. $types['node']->type, '');
        }
      }

      // Allow hook_meta_description_pattern_alter() to modify the pattern - we cant use drupal_alter as it only supports single arguments (or arrays). We need to pass 2 variables.
      $data = array(&$meta_description_pattern, &$types);
      foreach (module_implements('meta_description_pattern_alter') as $module) {
        $function = $module .'_meta_description_pattern_alter';
        call_user_func_array($function, $data);
      }

      // Apply token patterns by resetting the token cache first and then using token_replace_multiple to insert token values
      token_get_values('global', NULL, TRUE);
      $description = token_replace_multiple($meta_description_pattern, $types);
    }
  }

  // Use filter_xss to remove any tags and to entity encode content.
  return filter_xss($description, array());
}


/**
 * Implementation of hook_token_values().
 *
 * @param
 *   string The type of token being generated
 *
 * @return
 *   array An array of Token ID and Token Value pairs
 */
function meta_description_token_values($type) {
  $values = array();

  if ($type == 'global') {
    $values['page-description'] = meta_description_get_description();
  }

  return $values;
}


/**
 * Implementation of hook_token_list().
 *
 * @param
 *   string Which type of token list are we generating?
 *
 * @return
 *   array Nested array of Token ID and Token Name pairs.
 */
function meta_description_token_list($type = 'all') {
  $tokens = array();

  if ($type == 'global' || $type == 'all') {
    $tokens['global']['page-description'] = t("The meta description.");
  }

  return $tokens;
}


/**
 * Implementation of hook_preprocess_page().
 */
function meta_description_preprocess_page(&$vars) {
  if ($description = meta_description_page_get_description()) {
    drupal_set_html_head('<meta name="description" content="'. $description .'" />');
    $vars['head'] = drupal_get_html_head();
  }
}


/**
 * Implementation of hook_content_extra_fields().
 *
 * This allows CCK to control the weight of the Meta Description element as a "non-cck field"
 */
function meta_description_content_extra_fields($type_name) {
  $extra = array();

  if (variable_get('meta_description_type_'. $type_name .'_showfield', 0)) {
    $extra['meta_description'] = array(
      'label' => t('Meta Description'),
      'description' => t('Meta Description form.'),
      'weight' => -4
    );
  }

  return $extra;
}
