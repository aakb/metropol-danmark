<?php
// $Id: microblog.module,v 1.8 2010/06/13 23:44:46 jeckman Exp $ 

/**
 * @file
 * Implements Microblogging Protocol for Drupal (Server)
 * This lets users post microblog updates, as well as subscribe
 * to update streams across other servers which implement
 * the same protocol
 */

/**
 * Implementation of hook_node_info().
 *
 * todo: Should microblog updates be nodes?
 */
function microblog_node_info() {
  return array(
    'microblog' => array(
    'name' => t('Microblog Entry'),
    'module' => 'microblog',
    'description' => t('A <em>microblog entry</em> is a single post to a microblog.'),
    'has_title' => TRUE,
    'has_body' => FALSE,
    'title_label' => t('What are you doing?'),
    )
  );
}

/**
 * Implementation of hook_perm().
 */
function microblog_perm() {
  return array('post microblog entries', 'delete microblog entries', 
    'subscribe to local microblogs', 'subscribe to remote microblogs',
    'edit own microblog');
}

/**
 * Implementation of hook_access().
 */
function microblog_access($op, $node, $account) {
  switch ($op) {
    case 'create':
      // Anonymous users cannot post even if they have the permission. 
      return user_access('post microblog entries', $account) && $account->uid ? TRUE : NULL;
    case 'delete':
      // do I want admins to be able to delete status updates?
      return user_access('delete microblog entries', $account) || (user_access('delete microblog entries', $account) && ($node->uid == $account->uid)) ? TRUE : NULL;
  }
}

/**
 * Implementation of hook_user().
 */
function microblog_user($type, &$edit, &$user) {
  if ($type == 'view' && user_access('post microblog entries', $user)) {
    $user->content['summary']['microblog'] =  array(
      '#type' => 'user_profile_item',
      '#title' => t('Microblog'),
      '#value' => l(t('View recent microblog entries'), "microblog/$user->uid", array('attributes' => array('title' => t("Read @username's latest microblog entries.", array('@username' => $user->name))))),
      '#attributes' => array('class' => 'microblog'),
    );
  }
}

/**
 * Implementation of hook_help().
 */
function microblog_help($path, $arg) {
  switch ($path) {
    case 'admin/help#microblog':
      $output = '<p>'. t('The Open Microblog module allows registered users to maintain an online microblog.') .'</p>';
      $output .= '<p>'. t('There is an (optional) <em>Microblogs</em> menu item added to the Navigation menu, which displays all microblogs available on your site, and a <em>My Microblog</em> item displaying the current user\'s microblog updates. The <em>Microblog entry</em> menu item under <em>Create content</em> allows new microblog entries to be created.') .'</p>';
      $output .= '<p>'. t('Each microblog entry is displayed with an automatic link to other microblog entries created by the same user. By default, microblog entries have comments enabled. The microblog module also creates a <em>Recent microblog updates</em> block that may be enabled at the <a href="@blocks">blocks administration page</a>.', array('@blocks' => url('admin/build/block'))) .'</p>';
      return $output;
  }
}

/**
 * Implementation of hook_form().
 */
function microblog_form(&$node) {
  $type = node_get_types('type', $node);
  
  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => check_plain($type->title_label),
    '#required' => TRUE,
    '#maxlength' => 255,
  );

  return $form;
}

/**
 * Implementation of hook_form_alter()
 */
function microblog_form_alter(&$form, $form_state, $form_id) {
  global $user;  // need global user to get username
  if ($form_id == 'microblog_node_form') {
    $form['#attributes'] = array('class' => 'microblog-node-form');
    unset($form['menu']);
    unset($form['revision_information']);
    unset($form['author']);
    $form['author']['name']['#type'] = 'value';
    $form['author']['name']['#value'] = $user->name;
    unset($form['comment_settings']);
    unset($form['options']);
    unset($form['attachments']);
    unset($form['buttons']['preview']);
    $form['title_filter']['filter']['#type'] = 'value';
    $form['title_filter']['filter']['#value'] = filter_form(2);
    
    $form['buttons']['submit']['#submit'] = array('microblog_submit');    
    $form['buttons']['submit']['#ahah'] = array(
      'path' => 'microblog/js',
      'wrapper' => 'microblog-list',
      'event' => 'click',
      'method' => 'prepend',
      'effect' => 'fade',
      'progress' => array('type' => '1bar', 'message' => t('Please wait...')),
    );
  }
}   

/**
 * Implementation of hook_submit()
 */
function microblog_submit($form, &$form_state) {
  $node = node_form_submit_build_node($form, $form_state);
  $insert = empty($node->nid);
  node_save($node);
  
  $node_link = l(t('view'), 'node/'. $node->nid);
  $watchdog_args = array('@type' => $node->type, '%title' => $node->title);
  $t_args = array('@type' => node_get_types('name', $node), '%title' => $node->title);

  if ($insert) {
    watchdog('content', '@type: added %title.', $watchdog_args, WATCHDOG_NOTICE, $node_link);
    drupal_set_message(t('@type %title has been created.', $t_args));
  }
  else {
    watchdog('content', '@type: updated %title.', $watchdog_args, WATCHDOG_NOTICE, $node_link);
    drupal_set_message(t('@type %title has been updated.', $t_args));
  }
  if ($node->nid) {
    unset($form_state['rebuild']);
    $form_state['nid'] = $node->nid;
  }
  else {
    // In the unlikely case something went wrong on save, the node will be
    // rebuilt and node form redisplayed the same way as in preview.
    drupal_set_message(t('The post could not be saved.'), 'error');
  }
  $form_state['microblog_node'] = $node;
}

/**
 * AHAH callback handler to output microblog form submit results
 */
function microblog_js() {
  include_once 'modules/node/node.pages.inc';
  $form_state = array('storage' => NULL, 'submitted' => FALSE);
  $form_build_id = $_POST['form_build_id'];
  $form = form_get_cache($form_build_id, $form_state);
  
  $args = $form['#parameters'];
  $form_id = array_shift($args);
  $form_state['post'] = $form['#post'] = $_POST;
  $form['#programmed'] = $form['#redirect'] = FALSE;
  
  drupal_process_form($form_id, $form, $form_state);
  $form = drupal_rebuild_form($form_id, $form_state, $args, $form_build_id);
  $node = $form_state['microblog_node'];
  $errors = form_get_errors();

  if (!$errors) {
    // TODO: seems like there should be a better way to clear the form value
    $output = '<script>$("#edit-title").val("")</script>';
    $output .= theme('microblog_item', $node);
    drupal_get_messages(); 
  }
  else {
    foreach ($errors as $e) {
      $items[] = $e;
    }
    $output = '<div class="messages error">' . theme('item_list', $items) . '</div>';
  }
  drupal_json($output);
}
  
/**
 * Implementation of hook_view().
 */
function microblog_view($node, $teaser = FALSE, $page = FALSE) {
  if ($page) {
    // Breadcrumb navigation
    drupal_set_breadcrumb(array(l(t('Home'), NULL), l(t('Microblogs'), 'microblog'), l(t("@name's microblog", array('@name' => $node->name)), 'microblog/'. $node->uid)));
  }
  return node_prepare($node, $teaser);
}

/**
 * Implementation of hook_link().
 */
function microblog_link($type, $node = NULL, $teaser = FALSE) {
  $links = array();

  if ($type == 'node' && $node->type == 'microblog') {
    if (arg(0) != 'microblog' || arg(1) != $node->uid) {
      $links['blog_usernames_blog'] = array(
        'title' => t("@username's Microblog", array('@username' => $node->name)),
        'href' => "microblog/$node->uid",
        'attributes' => array('title' => t("Read @username's latest microblog entries.", array('@username' => $node->name)))
      );
    }
  }
  return $links;
}

/**
 * Implementation of hook_menu().
 */
function microblog_menu() {
  $items['microblog'] = array(
    'title' => 'Public Timeline',
    'page callback' => 'microblog_page_last',
    'access arguments' => array('access content'),
    'type' => MENU_SUGGESTED_ITEM,
    'file' => 'microblog.pages.inc',
  );
  $items['microblog/%user'] = array(
    'title' => 'My Microblog',
    'page callback' => 'microblog_page_user',
    'page arguments' => array(1),
    'access callback' => 'microblog_page_user_access',
    'access arguments' => array(1),
    'file' => 'microblog.pages.inc',
  );
  $items['microblog/%user/replies'] = array(
    'title' => 'Replies',
    'page callback' => 'microblog_page_replies',
    'page arguments' => array(1),
    'access callback' => 'microblog_page_user_access',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
    'file' => 'microblog.pages.inc'
  );
  $items['microblog/%user/feed'] = array(
    'title' => 'Microblogs',
    'page callback' => 'microblog_feed_user',
    'page arguments' => array(1),
    'access callback' => 'microblog_page_user_access',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
    'file' => 'microblog.pages.inc',
  );
  $items['microblog/%user/follow'] = array(
    'title' => 'Follow user',
    'page callback' => 'microblog_follow_user',
    'page arguments' => array(1),
    'access arguments' => array('subscribe to local microblogs'),
    'type' => MENU_CALLBACK,
    'file' => 'microblog.pages.inc',
  );
  $items['microblog/%user/leave'] = array(
    'title' => 'Stop Following User',
    'page callback' => 'microblog_leave_user',
    'page arguments' => array(1),
    'access arguments' => array('subscribe to local microblogs'),
    'type' => MENU_CALLBACK,
    'file' => 'microblog.pages.inc',
  );
  $items['microblog/%user/following'] = array(
    'title' => 'Following',
    'page callback' => 'microblog_page_following',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'microblog.pages.inc',
  );
  $items['microblog/%user/followers'] = array(
    'title' => 'Followers',
    'page callback' => 'microblog_page_followers',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'microblog.pages.inc',
  );
  $items['microblog/feed'] = array(
    'title' => 'Public Timeline Feed',
    'page callback' => 'microblog_feed_last',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'microblog.pages.inc',
  );
  $items['microblog/js'] = array(
    'title' => 'AHAH Handler for Open Microblog Posts',
    'page callback' => 'microblog_js',
    'access arguments' => array('post microblog entries'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Access callback for user blog pages.
 */
function microblog_page_user_access($account) {
  // The visitor must be able to access the site's content.
  // For a blog to 'exist' the user must either be able to
  // create new blog entries, or it must have existing posts.
  return $account->uid && user_access('access content') && (user_access('post microblog entries', $account) || _microblog_post_exists($account));
}

/**
 * Implementation of hook_block().
 *
 * Displays the most recent 10 blog titles.
 */
function microblog_block($op = 'list', $delta = 0, $edit=array()) {

  global $user;
  if ($op == 'list') {
    $block[0]['info'] = t('Recent microblog posts');
    return $block;
  }
  else if ($op == 'configure') {
    $form['items'] = array(
      '#type' => 'textfield',
      '#title' => 'Number of messages in block',
      '#default_value' => variable_get('microblog_block_num_messages', 5)
    );
    return $form;
  }
  else if ($op == 'save') {
    variable_set('microblog_block_num_messages', $edit['items']);
  }
  else if ($op == 'view') {
    if (user_access('access content')) {
      $result = db_query_range(db_rewrite_sql("SELECT n.nid, n.title, n.created, n.uid, u.picture, u.name
        FROM {node} n JOIN {users} u ON n.uid = u.uid
        WHERE n.type = 'microblog' AND n.status = 1 ORDER BY n.created DESC"), 0, intval(variable_get('microblog_block_num_messages', 5)));
      $block['content'] = theme('microblog_list', $result);
      $block['content'] .= theme('more_link', url('microblog'), t('Read the latest microblog entries.'));
      $block['subject'] = t('Recent microblog entries');
      return $block;
    }  
  }
}

/**
 * Implementation of hook_theme
 *
 * Theme function to display list of microblog entries
 *
 */ 
function microblog_theme($existing, $type, $theme, $path) {
  return array(
    'microblog_display' => array('arguments' => array('results' => NULL), ),
    'microblog_item' => array('arguments' => array('node'), ),
    'microblog_list' => array('arguments' => array('results' => NULL), ),
    'microblog_people_list' => array('arguments' => array('results' => NULL), ),
    'microblog_links' => array('arguments' => array('items')),
  );
}
 
function theme_microblog_display($result = NULL) {  
  $content = 'This is the theme_microblog_display function';
  return $content;
}

function theme_microblog_item($node) {
  $account = user_load(array('uid' => $node->uid));
  $content .= theme('user_picture', $account); 
  $content .= l($node->name, 'microblog/'. $node->uid);
  $content .= check_markup($node->title, $format = 'Full HTML', $check = TRUE);
  $content .= '<p align="right">' . l(format_interval((time() - $node->created), 1, NULL), 'node/'. $node->nid) . ' ago via web</p>';
  $content .= '<br /><br />';  
  return $content;
}
 
function theme_microblog_list($result = NULL) {
  $content = '';
  $content .= '<div id="microblog-list">';
  while ($node = db_fetch_object($result)) {
    $content .= theme('microblog_item', $node);
  } 
  $content .= theme('pager', NULL, variable_get('default_nodes_main', 10));
  $content .= '</div>';
  
  return $content;
}

function theme_microblog_people_list($result = NULL) {
  $content = '';
  while ($node = db_fetch_object($result)) {
    if ($node->picture) {
      $img = '<img src="/'. $node->picture .'" width="40" height="40" hspace="2" vspace="2" alt="'. $node->name .'" title="'. $node->name .'" />';
    }
    else {
      $img = '<img src="/themes/bluemarine/logo.png" width="40" height="40" hspace="2" vspace="2" alt="'. $node->name .'" title="'. $node->name .'" />';   
    }
    $content = l($img, 'microblog/' . $node->uid, array('html' => TRUE));
  } 
  $content.= theme('pager', NULL, variable_get('default_nodes_main', 10));
  return $content;
}

function theme_microblog_links($items) {
  $content .= '<div id="microblog-links">';
  $content .= theme('item_list', $items);
  $content .= '</div>';
  
  return $content;
}
